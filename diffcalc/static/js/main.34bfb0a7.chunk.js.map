{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["zeroToNine","hmsms","msec","sec","ms","s","m","h","sb","FPS","codecs","value","label","App","state","dbsize","bitrate","network","inputvideo","ingestTime","codec","decodeFps","processingTime","handleChange","prop","event","console","log","target","newState","Object","assign","_this","recalc","setState","inputFrames","itime","ttime","ptime","Math","max","this","react_default","a","createElement","TextField_default","id","onChange","margin","variant","select","SelectProps","native","helperText","map","option","key","defaultValue","InputProps","readOnly","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.34bfb0a7.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport TextField from '@material-ui/core/TextField';\n\nlet zeroToNine = [\"00\", \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\"]\n\nfunction hmsms(msec) {\n    var sec = (msec / 1000) | 0;\n    var ms = (msec % 1000) | 0;\n    var s = (sec % 60) | 0;\n    var m = (sec % 3600 / 60) | 0;\n    var h = (sec / 3600) | 0;\n\n    var sb = \"\";\n    sb += 0 <= h && h < 10 ? zeroToNine[h] : h;\n    sb += \":\";\n    sb += 0 <= m && m < 10 ? zeroToNine[m] : m;\n    sb += \":\";\n    sb += 0 <= s && s < 10 ? zeroToNine[s] : s;\n    sb += \".\";\n    if (ms >= 100) {\n        sb += ms;\n    } else if (ms >= 10) {\n        sb += '0' + ms;\n    } else {\n        sb += \"00\" + ms;\n    }\n    return sb;\n}\n\nlet FPS = 24;\nlet DIFF_PER_SEC = 9000000;\nconst codecs = [\n    {\n        value: 'h264',\n        label: 'h264',\n    },\n    {\n        value: 'prores',\n        label: 'prores',\n    },\n    {\n        value: 'dpx',\n        label: 'dpx',\n    }\n];\n\nclass App extends Component {\n\n    state = {\n        dbsize: 42,\n        bitrate: 5000,\n        network: 100,\n        inputvideo: 1,\n        ingestTime: 0,\n        codec: 'h264',\n        decodeFps: 420,\n        processingTime: 0\n    };\n\n    handleChange = (prop) => event => {\n        console.log(prop, event.target.value);\n        let newState = Object.assign({}, this.state);\n        newState[prop] = event.target.value;\n        if (\"codec\" === prop) {\n            switch (event.target.value) {\n                case \"h264\":\n                    newState.bitrate = 5000;\n                    newState.decodeFps = 420;\n                    break;\n                case \"dpx\":\n                    newState.bitrate = 1920 * 1080 * 6 * 8 * FPS / 1024;\n                    newState.decodeFps = 30;\n                    break;\n                case \"prores\":\n                    newState.bitrate = 200000;\n                    newState.decodeFps = 75;\n                    break;\n            }\n        }\n        this.recalc(newState);\n        this.setState(newState);\n    };\n\n    recalc(newState) {\n        let inputFrames = newState.inputvideo * 3600 * FPS;\n        let itime = newState.inputvideo * 3600 * newState.bitrate / (newState.network * 1000);\n        let ttime = inputFrames / newState.decodeFps;\n        let ptime = inputFrames * newState.dbsize * 3600 * FPS / DIFF_PER_SEC;\n        console.log(itime, ptime);\n        newState.ingestTime = Math.max(ttime, itime) * 1000;\n        newState.processingTime = ptime * 1000;\n        this.setState(newState);\n    }\n\n    componentDidMount() {\n        this.recalc(Object.assign({},this.state))\n    };\n\n    render() {\n        return (\n            <div>\n                <h1>VideoGorillas Bigfoot performance calculator</h1>\n                <TextField\n                    id=\"outlined-name\"\n                    label=\"Input video (hours)\"\n                    value={this.state.inputvideo}\n                    onChange={this.handleChange(\"inputvideo\")}\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                />\n                <TextField\n                    id=\"bla\"\n                    label=\"Existing db size (hours)\"\n                    value={this.state.dbsize}\n                    onChange={this.handleChange(\"dbsize\")}\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                />\n\n                <TextField\n                    id=\"bla\"\n                    label=\"Video Bitrate (kbps)\"\n                    value={this.state.bitrate}\n                    onChange={this.handleChange(\"bitrate\")}\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                />\n                <TextField\n                    id=\"bla\"\n                    label=\"Network speed (mbps)\"\n                    value={this.state.network}\n                    onChange={this.handleChange(\"network\")}\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                />\n                <TextField\n                    id=\"standard-select-currency-native\"\n                    select\n                    label=\"Codec\"\n                    value={this.state.codec}\n                    onChange={this.handleChange('codec')}\n                    SelectProps={{\n                        native: true,\n                        //     MenuProps: {\n                        //         className: classes.menu,\n                        //     },\n                    }}\n                    helperText=\"Select your codec\"\n                    margin=\"normal\"\n                >\n                    {codecs.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.label}\n                        </option>\n                    ))}\n                </TextField>\n                <br/>\n                <h1>Expected time</h1>\n\n                <TextField\n                    id=\"outlined-read-only-input\"\n                    label=\"Ingest time\"\n                    value={hmsms(this.state.ingestTime)}\n                    defaultValue=\"00:00:00.000\"\n                    margin=\"normal\"\n                    InputProps={{\n                        readOnly: true,\n                    }}\n                    variant=\"outlined\"\n                />\n\n                <TextField\n                    id=\"outlined-read-only-input2\"\n                    label=\"Processing time\"\n                    value={hmsms(this.state.processingTime)}\n                    defaultValue=\"00:00:00.000\"\n                    margin=\"normal\"\n                    InputProps={{\n                        readOnly: true,\n                    }}\n                    variant=\"outlined\"\n                />\n\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}